//
//  FirebaseDestination.swift
//  XCGLogger+Firebase
//
//  Created by Oleksii Shvachenko on 9/27/17.
//  Copyright Â© 2017 oleksii. All rights reserved.
//

import Foundation
import XCGLogger
import FirebaseCommunity
import CryptoSwift

extension LogDetails {
  var json: [String: Any] {
    return [
      "level": level.description,
      "date": ISO8601DateFormatter().string(from: date),
      "message": message,
      "functionName": functionName,
      "fileName": fileName,
      "lineNumber": lineNumber
    ]
  }
}

private protocol SaveStrategy {
  func save(logDetails: LogDetails, message: String)
}

private class SimpleFirebaseSaveStrategy: SaveStrategy {
  private let firebaseRef: DatabaseReference
  init(firebaseRef: DatabaseReference) {
    self.firebaseRef = firebaseRef
  }

  func save(logDetails: LogDetails, message: String) {
    firebaseRef.child("Logs").child(message.md5()).setValue(logDetails.json)
  }
}

private class EncryptedFirebaseSaveStrategy: SaveStrategy {
  private let firebaseRef: DatabaseReference
  private let aesEncoder: AES
  init(firebaseRef: DatabaseReference, aesEncoder: AES) {
    self.firebaseRef = firebaseRef
    self.aesEncoder = aesEncoder
  }

  func save(logDetails: LogDetails, message: String) {
    let data = try! JSONSerialization.data(withJSONObject: logDetails.json, options: JSONSerialization.WritingOptions(rawValue: 0))
    let raw = try! aesEncoder.encrypt(data.bytes)
    let encryptedData = Data(bytes: raw)
    firebaseRef.child("Logs").child(message.md5()).setValue(encryptedData.toHexString())
  }
}


public class FirebaseDestination: BaseDestination {
  public struct EncryptionParams {
    let key: String
    let iv: String
    init(key: String, iv: String) {
      precondition(key.count == iv.count, "Key and iv should have the same length of 16 characters")
      self.key = key
      self.iv = iv
    }
  }
  private let saveStrategy: SaveStrategy
  /**
   Designated initialization

   - Parameter encryptionKey: key to use in AES 128 encryption.
   - Parameter firebaseSettingsPath: path to plist generated by goole, Bundle.main.path(forResource: "FirebaseSetting", ofType: "plist").
   */
  public init?(firebaseSettingsPath: String, encryptionParams: EncryptionParams? = nil) {
    guard let options = FirebaseOptions(contentsOfFile: firebaseSettingsPath) else {
      return nil
    }
    FirebaseApp.configure(name: "FirebaseLogs", options: options)
    let app = FirebaseApp.app(name: "FirebaseLogs")!
    let database = Database.database(app: app)
    database.isPersistenceEnabled = true
    let firebaseRef = Database.database(app: app).reference()
    //check encryption
    if let encryptionParams = encryptionParams {
      guard let aesEncoder = try? AES(key: encryptionParams.key, iv: encryptionParams.iv) else {
        return nil
      }
      saveStrategy = EncryptedFirebaseSaveStrategy(firebaseRef: firebaseRef, aesEncoder: aesEncoder)
    } else {
      saveStrategy = SimpleFirebaseSaveStrategy(firebaseRef: firebaseRef)
    }
  }
  
  public override func output(logDetails: LogDetails, message: String) {
    var logDetails = logDetails
    var message = message
    // Apply filters, if any indicate we should drop the message, we abort before doing the actual logging
    guard !self.shouldExclude(logDetails: &logDetails, message: &message) else { return }

    self.applyFormatters(logDetails: &logDetails, message: &message)
    //store log detail
    saveStrategy.save(logDetails: logDetails, message: message)
  }
}
